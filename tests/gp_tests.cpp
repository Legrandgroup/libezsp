#include <iostream>
#include <iomanip>
#include <stdint.h>

#include "spi/mock-uart/MockUartDriver.h"
#include "spi/TimerBuilder.h"
#include "spi/IAsyncDataInputObserver.h"

#include "spi/Logger.h"
#include "ezsp/lib-ezsp-main.h"
#include "../example/mainEzspStateMachine.h"

#include "TestHarness.h"

using NSSPI::IAsyncDataInputObserver;
using NSSPI::Logger;
using NSSPI::LOG_LEVEL;
using NSSPI::TimerBuilder;
using NSSPI::GenericAsyncDataInputObservable;
using NSSPI::MockUartDriver;
using NSSPI::MockUartScheduledByteDelivery;

using NSEZSP::CLibEzspMain;
using NSEZSP::CGpDevice;

/**
 * @brief Class implementing an observer that validates state transition during a sample ezsp in/out test sequence
**/
class GPRecvSensorMeasurementTest : public IAsyncDataInputObserver  {
public:
	/**
	 * @brief Constructor
	 *
	 * @param[in] stageTransitionExpectedList A pointer to an external list of expected buffer written to the serial line, that will automatically trigger a stage transition (stage++)
	 *            Because this is a pointer, you can update this vector on the fly during the test, we will use an always up-to-date vector each time bytes are written to the serial port.
	 *            However, this also means you have to keep the vector of vector of uint8_t memory allocated during the whole lifetime of this GPRecvSensorMeasurementTest object or you will have dereference crashes!
	 */
	GPRecvSensorMeasurementTest(const std::vector< std::vector<uint8_t> >* stageTransitionExpectedList = nullptr) : stage(0), nbWriteCalls(0), nbReadCallbacks(0), stageExpectedTransitions(stageTransitionExpectedList) { }

	/**
	 * @brief Copy constructor
	 *
	 * @warning Copy construction is not allowed on instances of this class
	 */
	GPRecvSensorMeasurementTest(const GPRecvSensorMeasurementTest& other) = delete;

	/**
	 * @brief Assignment operator
	 *
	 * @warning Assignment is not allowed on instances of this class
	 */
	GPRecvSensorMeasurementTest operator= (const GPRecvSensorMeasurementTest& other) = delete;

	/**
	 * @brief Write callback function to register to the mock serial interface
	 *
	 * It will be invoked each time a write() is done on the mock serial interface to which it has been registered
	 */
	int onWriteCallback(size_t& writtenCnt, const void* buf, size_t cnt, std::chrono::duration<double, std::milli> delta) {
		std::cout << "Request to write " << std::dec << cnt << " bytes: ";
		for(unsigned int loop=0; loop<cnt; loop++) {
			if (loop!=0)
				std::cout << " ";
			std::cout << std::hex << std::setw(2) << std::setfill('0') << unsigned((static_cast<const uint8_t*>(buf))[loop]);
		}
		if (delta != std::chrono::duration<double, std::milli>::max()) {
			std::cout << ". Delta since last write: " << std::dec << (std::chrono::duration_cast<std::chrono::milliseconds>(delta)).count() << "ms";
			if (this->nbWriteCalls == 0) {
				std::cout << "\n";
				FAILF("First call to write() on mock serial interface should not lead to a valid delta\n");
			}
		}
		std::cout << " (current stage " << std::dec << this->stage << ")\n";
		writtenCnt = cnt;
		bool transitionMatch = false;
		if (this->stageExpectedTransitions && this->stageExpectedTransitions->size() > this->stage) {	/* Do we have an expected read buffer to automatically transition to the next stage? */
			if (compareBufWithVector(buf, cnt, (*this->stageExpectedTransitions)[this->stage])) {
				this->stage++;
				transitionMatch = true;
				std::cout << "Automatic trigger matched, transitionning to stage " << this->stage << "\n";
			}
		}
		if (!transitionMatch) {
			if (this->stage == 121  || this->stage == 122 || this->stage == 123) {	/* Stages 121, 122 and 123 are specific because there are parts of the buffer that come from randomness, thus cannot be strictly compared */
				std::cout << "Specific exception for parsing stage 121 to 123\n";
				this->stage++;
				transitionMatch = true;
				std::cout << "Trigger matched on EZSP_SET_POLICY and EZSP_SET_INITIAL_SECURITY_STATE, transitionning to stage " << this->stage << "\n";
			}
		}
		if (!transitionMatch) {
			std::cerr << "Warning: Got an unexpected command written to serial port while at stage " << std::dec << this->stage << ":\n";
			std::cerr << "Received: ";
			for (uint8_t loop=0; loop<cnt; loop++) {
				std::cerr << " " << std::hex << std::setw(2) << std::setfill('0') << unsigned((static_cast<const unsigned char*>(buf))[loop]);
			}
			std::cerr << "\nExpecting: ";
			const std::vector<uint8_t>& expectedBuffer = (*this->stageExpectedTransitions)[this->stage];
			for (uint8_t loop=0; loop<expectedBuffer.size(); loop++) {
				std::cerr << " " << std::hex << std::setw(2) << std::setfill('0') << +static_cast<uint8_t>(expectedBuffer[loop]);
			}
			std::cerr << "\n";
			FAILF("Unexpected command written to serial port");
		}
		this->nbWriteCalls++;
		return 0;
	}

	/**
	 * @brief Write callback function to register to the mock serial interface
	 *
	 * It will be invoked each time a read() is done on the mock serial interface to which it has been registered
	 */
	void onReadCallback(const unsigned char* dataIn, const size_t dataLen) {
		std::cerr << "Got notification of " << std::dec << dataLen << " bytes read: ";
		for(unsigned int loop=0; loop<dataLen; loop++) {
			if (loop!=0)
				std::cout << " ";
			std::cout << std::hex << std::setw(2) << std::setfill('0') << unsigned((static_cast<const uint8_t*>(dataIn))[loop]);
		}
		std::cerr << "\n";
		this->nbReadCallbacks++;
	}

	/**
	 * @brief Callback invoked on UART received bytes
	 */
	void handleInputData(const unsigned char* dataIn, const size_t dataLen) {
		this->onReadCallback(dataIn, dataLen);
	}
public:
	unsigned int stage;	/*!< Counter for the internal state machine */
	unsigned int nbWriteCalls;	/*!< How many time the onWriteCallback() was executed */
	unsigned int nbReadCallbacks;	/*!< How many time the onReadCallback() was executed */
	const std::vector< std::vector<uint8_t> >* stageExpectedTransitions;	/*!< A pointer to an external list of expected buffer written to the serial line, that will automatically trigger a stage transition (stage++) */
};

TEST_GROUP(gp_tests) {
};

#define UT_WAIT_MS(tms) std::this_thread::sleep_for(std::chrono::milliseconds(tms))
#define UT_FAILF_UNLESS_STAGE(tstage) do {\
	if (serialProcessor.stage != tstage) \
		FAILF("Failed to transition to stage %d", tstage); \
	else \
		std::cout << "ASH transitionned to stage " << tstage << "\n"; \
	} while(0)


#define GPD_KEY { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa }
TEST(gp_tests, gp_recv_sensor_measurement) {
	TimerBuilder timerFactory;
	GenericAsyncDataInputObservable uartIncomingDataHandler;
	Logger::getInstance()->setLogLevel(LOG_LEVEL::DEBUG);	/* Only display logs for debug level info and higher (up to error) */
	std::vector< std::vector<uint8_t> > stageExpectedTransitions;
	GPRecvSensorMeasurementTest serialProcessor(&stageExpectedTransitions);
	auto wcb = [&serialProcessor](size_t& writtenCnt, const void* buf, size_t cnt, std::chrono::duration<double, std::milli> delta) -> int {
		return serialProcessor.onWriteCallback(writtenCnt, buf, cnt, delta);
	};
	MockUartDriver uartDriver(wcb);
	if (uartDriver.open("/dev/ttyUSB0", 57600) != 0) {
		FAILF("Failed opening mock serial port");
	}

	stageExpectedTransitions.push_back({0x1a, 0xc0, 0x38, 0xbc, 0x7e});
	std::vector<CGpDevice> GPDList;

	//GPDList.push_back(CGpDevice(0x01510037U, GPD_KEY));
	NSEZSP::CEzsp lib_main(&uartDriver, timerFactory, 26);
	NSMAIN::MainStateMachine fsm(timerFactory, lib_main, false, 0, false, false, GPDList, std::vector<uint32_t>(), false);
	auto clibobs = [&fsm, &lib_main](NSEZSP::CLibEzspState i_state) {
		try {
			fsm.ezspStateChangeCallback(i_state);
		} catch (const std::exception& e) {
			exit(1);
		}
	};
	lib_main.registerLibraryStateCallback(clibobs);

	auto gprecvobs = [&fsm](NSEZSP::CGpFrame &i_gpf) {
		fsm.onReceivedGPFrame(i_gpf);
	};
	lib_main.registerGPFrameRecvCallback(gprecvobs);

	UT_WAIT_MS(50);	/* Give 50ms for libezsp's internal process to write to serial */
	UT_FAILF_UNLESS_STAGE(1);

	stageExpectedTransitions.push_back({0x00, 0x42, 0x21, 0xa8, 0x52, 0xcd, 0x6e, 0x7e });
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x1a, 0xc1, 0x02, 0x0b, 0x0a, 0x52, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(2);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x43, 0x21, 0xa8, 0x53, 0x05, 0xf0, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x42, 0xa1, 0xa8, 0x53, 0x28, 0x25, 0xd4, 0xf4, 0x49, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(4);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x40, 0x21, 0x57, 0x54, 0x39, 0x5e, 0x95, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x43, 0xa1, 0x57, 0x54, 0x2a, 0x25, 0xd4, 0xdc, 0x0b, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(6);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x41, 0x21, 0x57, 0x54, 0x79, 0x17, 0x92, 0x59, 0x40, 0xe5, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x40, 0xa1, 0x57, 0x54, 0x39, 0x15, 0x7f, 0xf2, 0xa0, 0x58, 0x3d, 0x9c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(8);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x46, 0x21, 0x57, 0x54, 0x79, 0x16, 0xb8, 0x59, 0x43, 0x90, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x41, 0xa1, 0x57, 0x54, 0x79, 0x23, 0xc6, 0xd8, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(10);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x47, 0x21, 0x57, 0x54, 0x79, 0x7d, 0x31, 0xb2, 0x59, 0xd6, 0xc5, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x46, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x64, 0x0c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(12);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x44, 0x21, 0x57, 0x54, 0x79, 0x10, 0xf2, 0x59, 0xfd, 0x0a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x47, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xce, 0x55, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(14);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x45, 0x21, 0x57, 0x54, 0x79, 0x7d, 0x33, 0xba, 0x59, 0xdf, 0x31, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x44, 0xa1, 0x57, 0x54, 0x79, 0x20, 0x87, 0xaf, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(16);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x4a, 0x21, 0x57, 0x54, 0x79, 0x12, 0x92, 0x59, 0xa4, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x45, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x8a, 0xc6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(18);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x4b, 0x21, 0x57, 0x54, 0x79, 0x1d, 0xa2, 0x59, 0x72, 0x56, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x4a, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x73, 0xc5, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(20);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x48, 0x21, 0x57, 0x54, 0x79, 0x19, 0xb0, 0x59, 0xda, 0xb4, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x4b, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xd9, 0x9c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(22);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x49, 0x21, 0x57, 0x54, 0x79, 0x7d, 0x38, 0xb7, 0x59, 0x8b, 0x1d, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x48, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xf6, 0x90, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(24);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x4e, 0x21, 0x57, 0x54, 0x79, 0x05, 0xbd, 0x59, 0xb8, 0x8c, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x49, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x9d, 0x0f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(26);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x4f, 0x21, 0x57, 0x54, 0x79, 0x04, 0x92, 0x59, 0x66, 0x6a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x4e, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x69, 0x4e, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(28);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x4c, 0x21, 0x57, 0x54, 0x79, 0x07, 0x0a, 0x52, 0x0e, 0x20, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x4f, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xc3, 0x17, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(30);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x4d, 0x21, 0x57, 0x54, 0x79, 0x06, 0xb7, 0x59, 0x1f, 0x24, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x4c, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xec, 0x1b, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(32);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x52, 0x21, 0x57, 0x54, 0x79, 0x01, 0xa6, 0x59, 0x54, 0xf0, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x4d, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x87, 0x84, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(34);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x53, 0x21, 0x57, 0x54, 0x79, 0x00, 0xb2, 0x59, 0x53, 0x79, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x52, 0xa1, 0x57, 0x54, 0x79, 0x22, 0x22, 0xb7, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(36);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x50, 0x21, 0x57, 0x54, 0x79, 0x02, 0xb2, 0x59, 0x2c, 0x2a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x53, 0xa1, 0x57, 0x54, 0x79, 0x22, 0x88, 0xee, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(38);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x51, 0x21, 0x57, 0x54, 0x79, 0x0d, 0xb2, 0x59, 0xff, 0x15, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x50, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xe1, 0x56, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(40);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x56, 0x21, 0x57, 0x54, 0x79, 0x0c, 0xb2, 0x59, 0x15, 0x4d, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x51, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x8a, 0xc9, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(42);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x57, 0x21, 0x57, 0x54, 0x79, 0x0f, 0xb2, 0x59, 0xb3, 0x7d, 0x33, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x56, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x7d, 0x5e, 0x88, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(44);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x54, 0x21, 0x57, 0x54, 0x79, 0x0e, 0xb4, 0x59, 0x3f, 0xb6, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x57, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xd4, 0xd1, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(46);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x55, 0x21, 0x57, 0x54, 0x79, 0x09, 0xb2, 0x59, 0xef, 0x8e, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x54, 0xa1, 0x57, 0x54, 0x79, 0x22, 0xbd, 0x69, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(48);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x5a, 0x21, 0x57, 0x54, 0x79, 0x08, 0xb2, 0x59, 0x1b, 0x0c, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x55, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x90, 0x42, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(50);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x5b, 0x21, 0x57, 0x54, 0x79, 0x0b, 0xbe, 0x59, 0xf8, 0x3f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x5a, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x69, 0x41, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(52);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x58, 0x21, 0x57, 0x54, 0x79, 0x0a, 0xf2, 0x5f, 0xf6, 0x5b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x5b, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xc3, 0x7d, 0x38, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(54);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x59, 0x21, 0x57, 0x54, 0x79, 0x35, 0xb1, 0x59, 0xd8, 0x98, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x58, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xec, 0x14, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(56);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x5e, 0x21, 0x57, 0x54, 0x79, 0x34, 0x8e, 0x59, 0x27, 0x6b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x59, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x87, 0x8b, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(58);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x5f, 0x21, 0x57, 0x54, 0x79, 0x37, 0xb3, 0x59, 0xf2, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x5e, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x73, 0xca, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(60);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x5c, 0x21, 0x57, 0x54, 0x79, 0x31, 0xb2, 0x59, 0x62, 0x5e, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x5f, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xd9, 0x93, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(62);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x5d, 0x21, 0x57, 0x54, 0x79, 0x3f, 0xb2, 0x59, 0x86, 0x51, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x5c, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xf6, 0x9f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(64);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x62, 0x21, 0x57, 0x54, 0x79, 0x3e, 0xbd, 0x59, 0x24, 0x31, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x5d, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x9d, 0x00, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(66);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x63, 0x21, 0x57, 0x54, 0x79, 0x39, 0xb2, 0x59, 0x4e, 0x91, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x62, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x4b, 0x8f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(68);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x60, 0x21, 0x57, 0x54, 0x79, 0x38, 0xb3, 0x59, 0x5b, 0xa3, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x63, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xe1, 0xd6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(70);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x61, 0x21, 0x57, 0x54, 0x79, 0x3b, 0xb2, 0x59, 0xce, 0xcc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x60, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xce, 0xda, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(72);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x66, 0x21, 0x57, 0x54, 0x79, 0x3a, 0xb2, 0x59, 0x24, 0x94, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x61, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xa5, 0x45, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(74);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x67, 0x21, 0x57, 0x54, 0x79, 0x26, 0xb3, 0x59, 0xde, 0xa9, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x66, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x51, 0x04, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(76);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x64, 0x21, 0x57, 0x54, 0x79, 0x21, 0xba, 0x59, 0xf0, 0x92, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x67, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xfb, 0x5d, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(78);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x65, 0x21, 0x57, 0x54, 0x79, 0x20, 0xb8, 0x59, 0x5e, 0xce, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x64, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xd4, 0x51, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(80);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x6a, 0x21, 0x57, 0x54, 0x79, 0x23, 0x9e, 0x58, 0x78, 0x4d, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x65, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xbf, 0xce, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(82);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x6b, 0x21, 0x57, 0x54, 0x79, 0x22, 0xb3, 0x59, 0xd0, 0xe8, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x6a, 0xa1, 0x57, 0x54, 0x79, 0x15, 0x46, 0xcd, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(84);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x68, 0x21, 0x57, 0x54, 0x79, 0x2d, 0xea, 0x5b, 0x79, 0x8f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x6b, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xec, 0x94, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(86);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x69, 0x21, 0x57, 0x54, 0x79, 0x14, 0x4d, 0x59, 0x79, 0x1e, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x68, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xc3, 0x98, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(88);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x6e, 0x21, 0x57, 0x54, 0x7f, 0x15, 0xb3, 0x6b, 0x92, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x69, 0xa1, 0x57, 0x54, 0x79, 0x15, 0xa8, 0x07, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(90);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x6f, 0x21, 0x57, 0x54, 0x7f, 0x7d, 0x31, 0xf2, 0x3d, 0xb5, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x6e, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0xf6, 0xe0, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(92);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x6c, 0x21, 0x57, 0x54, 0x7f, 0x14, 0xa0, 0xee, 0xdc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x6f, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0x5c, 0xb9, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(94);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x6d, 0x21, 0x57, 0x54, 0x7f, 0x16, 0x82, 0x4e, 0x98, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x6c, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0x73, 0xb5, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(96);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x72, 0x21, 0x57, 0x54, 0x28, 0x14, 0xb6, 0x58, 0x93, 0x4a, 0x25, 0xab, 0x54, 0x92, 0x49, 0x9c, 0x4e, 0xb8, 0xc5, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x6d, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0x7d, 0x38, 0x2a, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(98);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x73, 0x21, 0x57, 0x54, 0x28, 0xe7, 0xbc, 0xf8, 0xf0, 0x4a, 0x25, 0xab, 0x54, 0xb3, 0x49, 0xbd, 0x4e, 0xff, 0x2f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x72, 0xa1, 0x57, 0x54, 0x28, 0x15, 0x6c, 0x85, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(100);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x70, 0x21, 0x57, 0x54, 0x3d, 0x12, 0xff, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x73, 0xa1, 0x57, 0x54, 0x28, 0x15, 0xc6, 0xdc, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(102);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x71, 0x21, 0x57, 0x54, 0x3d, 0xe7, 0x8a, 0x7e});
	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x70, 0xa5, 0x57, 0x54, 0x3d, 0x15, 0x9c, 0x50, 0x7e, 0x33, 0x70, 0xb1, 0x57, 0x54, 0x33, 0x85, 0x86, 0xc1, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(105);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x45, 0x76, 0x21, 0x57, 0x54, 0x32, 0xb9, 0xcc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x44, 0x71, 0xa1, 0x57, 0x54, 0x3d, 0x65, 0x84, 0x3f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(107);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x56, 0x77, 0x21, 0x57, 0x54, 0x32, 0xc7, 0xf9, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x55, 0x76, 0xa1, 0x57, 0x54, 0x32, 0x17, 0x8d, 0x8f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(109);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x67, 0x74, 0x21, 0x57, 0x54, 0x32, 0x43, 0x07, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x77, 0xa1, 0x57, 0x54, 0x32, 0x17, 0x49, 0x20, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(111);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x70, 0x75, 0x21, 0x57, 0x54, 0x0a, 0x8c, 0xc8, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x77, 0x74, 0xa1, 0x57, 0x54, 0x32, 0x17, 0x08, 0xda, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(113);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x00, 0x75, 0xa1, 0x57, 0x54, 0x0a, 0x15, 0x7c, 0x21, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(114);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x02, 0x7a, 0x21, 0x57, 0x54, 0x32, 0x90, 0xb6, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x10, 0x75, 0xb1, 0x57, 0x54, 0x33, 0x84, 0x63, 0x95, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(116);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x33, 0x7b, 0x21, 0x57, 0x54, 0x7f, 0x15, 0xb3, 0x29, 0x32, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x21, 0x7a, 0xa1, 0x57, 0x54, 0x32, 0x15, 0xe3, 0x89, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(118);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x24, 0x78, 0x21, 0x57, 0x54, 0x7f, 0x10, 0xe2, 0xc5, 0x55, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x32, 0x7b, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0x32, 0x40, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(120);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x35, 0x79, 0x21, 0x57, 0x54, 0x42, 0x7d, 0x31, 0xb9, 0x03, 0xfd, 0x2d, 0x67, 0xcf, 0x30, 0xd3, 0x25, 0xf0, 0x27, 0x46, 0xc5, 0x8e, 0xab, 0x57, 0xb2, 0x98, 0xec, 0x7d, 0x38, 0xf8, 0xd4, 0x73, 0x69, 0xa8, 0x3d, 0xf3, 0x7f, 0xb6, 0x12, 0x98, 0xcc, 0xa8, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0xbe, 0xe9, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x43, 0x78, 0xa1, 0x57, 0x54, 0x7f, 0x15, 0xc0, 0xa0, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(122);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x46, 0x7d, 0x5e, 0x21, 0x57, 0x54, 0x34, 0x15, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x8f, 0x08, 0x9f, 0x54, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0xb5, 0x6f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x54, 0x79, 0xa1, 0x57, 0x54, 0x42, 0x15, 0xd8, 0xf6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(124);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x7f, 0x21, 0x57, 0x54, 0x5a, 0xa5, 0x9b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x65, 0x7d, 0x5e, 0xa5, 0x57, 0x54, 0x34, 0x15, 0xda, 0xa2, 0x7e, 0x75, 0x7d, 0x5e, 0xb1, 0x57, 0x54, 0x33, 0x85, 0x7a, 0xab, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(127);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x7c, 0x21, 0x57, 0x54, 0x02, 0xfa, 0x98, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x7f, 0xa1, 0x57, 0x54, 0x5a, 0x85, 0xd6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(129);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x7c, 0xa1, 0x57, 0x54, 0x02, 0x15, 0xb3, 0x8c, 0x90, 0xd0, 0xbe, 0x47, 0xc9, 0x01, 0x57, 0x81, 0x0f, 0x24, 0xb1, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0x3e, 0x9c, 0x8e, 0xd4, 0x85, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(130);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x7d, 0x5d, 0xa1, 0x57, 0x54, 0xc8, 0xda, 0x47, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(131);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x02, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0xb3, 0xe1, 0xd4, 0x4a, 0x25, 0xaa, 0x64, 0x92, 0x7d, 0x38, 0x9d, 0x7f, 0x27, 0xfa, 0xec, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0x7c, 0x7d, 0x3a, 0x3c, 0x80, 0xc6, 0x50, 0x39, 0x25, 0xe3, 0x39, 0x62, 0x26, 0xcb, 0x7d, 0x31, 0x51, 0x12, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x9b, 0x64, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(132);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x03, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xa3, 0x79, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(133);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x00, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0xb3, 0xe1, 0xd4, 0x4a, 0x25, 0xaa, 0x50, 0x92, 0x7d, 0x38, 0x9d, 0x4b, 0x27, 0xfa, 0xec, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0xd4, 0x95, 0x0d, 0x41, 0x67, 0x74, 0xc5, 0x25, 0x55, 0x6d, 0x71, 0x7f, 0x78, 0xc3, 0x26, 0xec, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xcb, 0xc8, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(134);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x01, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xe7, 0xea, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(135);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x06, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0xb3, 0xe1, 0xd4, 0x4a, 0x25, 0xaa, 0x62, 0x92, 0x7d, 0x38, 0x9d, 0x79, 0x27, 0xfa, 0xec, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0xda, 0xb5, 0xdb, 0x03, 0xd1, 0xf6, 0xfe, 0xc1, 0x5a, 0xbf, 0x16, 0xf9, 0xf2, 0x52, 0x24, 0x78, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x62, 0x8a, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(136);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x07, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xb9, 0xf2, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(137);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x04, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0xf9, 0xd4, 0x4a, 0x25, 0xaa, 0x50, 0x92, 0x49, 0x9c, 0x4b, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0xd4, 0x95, 0x0d, 0x41, 0x67, 0x74, 0xc5, 0x25, 0x55, 0x6d, 0x71, 0x7f, 0x78, 0xc3, 0x26, 0xec, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xe3, 0xbc, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(138);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x05, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xfd, 0x61, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(139);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x0a, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0xb3, 0xe1, 0xd4, 0x4a, 0x25, 0xaa, 0x51, 0x92, 0x49, 0x9c, 0x4a, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0x7f, 0x1c, 0xe2, 0x8c, 0x44, 0x75, 0xa2, 0x60, 0xfe, 0xe4, 0x9e, 0xb2, 0x5b, 0xc2, 0x41, 0xa9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x75, 0xe4, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(140);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x0b, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xae, 0x3b, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(141);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x08, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x31, 0x66, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(142);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x09, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xea, 0xa8, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(143);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x0e, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3d, 0x8f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(144);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x0f, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xb4, 0xb0, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(145);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x0c, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xdf, 0x86, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(146);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x0d, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xf0, 0x23, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(147);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x12, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8b, 0xe5, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(148);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x7d, 0x33, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xb9, 0xfd, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(149);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x10, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x69, 0xec, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(150);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x7d, 0x31, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xfd, 0x6e, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(151);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x16, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x65, 0x05, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(152);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x17, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xa3, 0x76, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(153);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x14, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x87, 0x0c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(154);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x15, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xe7, 0xe5, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(155);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x7d, 0x3a, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4c, 0x7c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(156);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x1b, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xb4, 0xbf, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(157);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x7d, 0x38, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xae, 0x75, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(158);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x19, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xf0, 0x2c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(159);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x1e, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa2, 0x9c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(160);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x1f, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xae, 0x34, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(161);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x1c, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x40, 0x95, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(162);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x1d, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xea, 0xa7, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(163);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x22, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3a, 0xf1, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(164);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x23, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0x96, 0x71, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(165);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x20, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd8, 0xf8, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(166);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x21, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xd2, 0xe2, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(167);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x26, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd4, 0x7d, 0x31, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(168);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x27, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0x8c, 0xfa, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(169);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x24, 0xa1, 0x57, 0x54, 0xe2, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x36, 0x7d, 0x38, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(170);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x25, 0xa1, 0x57, 0x54, 0xe3, 0x15, 0xc8, 0x69, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(171);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x2a, 0xa1, 0x57, 0x54, 0xe2, 0xa4, 0x7f, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x66, 0x8b, 0xfd, 0x96, 0x4e, 0x89, 0xdc, 0x02, 0x17, 0xa7, 0xcb, 0xcd, 0xde, 0x6f, 0x8f, 0x4a, 0xcb, 0xdb, 0xd5, 0xe6, 0x69, 0x8d, 0x06, 0x5e, 0xa9, 0xec, 0x76, 0x1b, 0xa5, 0xea, 0x75, 0x82, 0x40, 0x98, 0x4d, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xa5, 0xf2, 0x37, 0xd0, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(172);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x2b, 0xa1, 0x57, 0x54, 0xcb, 0x15, 0x14, 0x7c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(173);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x28, 0xa1, 0x57, 0x54, 0xf7, 0x15, 0xb3, 0x59, 0x94, 0x4a, 0x14, 0xaa, 0x55, 0x92, 0x78, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0x31, 0x67, 0x8b, 0x02, 0x39, 0x9c, 0x76, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0x14, 0xcd, 0xde, 0x90, 0x70, 0x00, 0x38, 0xdb, 0xd5, 0xd2, 0x69, 0x73, 0xb9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0x15, 0x8a, 0x7d, 0x5d, 0xbe, 0x67, 0xb3, 0xd9, 0xec, 0x4e, 0x1f, 0x8f, 0xc7, 0xe3, 0xf1, 0xf8, 0x44, 0x14, 0x02, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(174);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x29, 0xa1, 0x57, 0x54, 0xf5, 0x15, 0x76, 0x75, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(175);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x2e, 0xa1, 0x57, 0x54, 0xe3, 0x14, 0x88, 0xda, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(176);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x2f, 0xa1, 0x57, 0x54, 0xcb, 0x14, 0x1e, 0xd6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(177);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x2c, 0xa1, 0x57, 0x54, 0xf7, 0x15, 0xb3, 0x59, 0x94, 0x4a, 0x10, 0xaa, 0x55, 0x92, 0x7c, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0x31, 0x67, 0x8b, 0x02, 0x39, 0x9c, 0x76, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0x14, 0xcd, 0xde, 0x90, 0x70, 0x00, 0x38, 0xdb, 0xd5, 0xd2, 0x69, 0x73, 0xb9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0x15, 0x8a, 0x7d, 0x5d, 0xbe, 0x67, 0xb3, 0xd9, 0xec, 0x4e, 0x1f, 0x8f, 0xc7, 0xe3, 0xf1, 0xf8, 0x44, 0x47, 0xc6, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(178);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x2d, 0xa1, 0x57, 0x54, 0xf5, 0x15, 0x6c, 0xfe, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(179);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x32, 0xa1, 0x57, 0x54, 0xe3, 0x14, 0x85, 0x97, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(180);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x33, 0xa1, 0x57, 0x54, 0xcb, 0x17, 0x23, 0xf8, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(181);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x30, 0xa1, 0x57, 0x54, 0xf7, 0x15, 0xb3, 0x59, 0x94, 0x4a, 0x12, 0xaa, 0x55, 0x92, 0x7d, 0x5e, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0x31, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0x14, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x73, 0xb9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0x15, 0x8a, 0x7d, 0x5d, 0xbe, 0x67, 0xb3, 0xd9, 0xec, 0x4e, 0x1f, 0x8f, 0xc7, 0xe3, 0xf1, 0xf8, 0x44, 0xfa, 0xef, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(182);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x31, 0xa1, 0x57, 0x54, 0xf5, 0x15, 0x61, 0xb3, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(183);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x36, 0xa1, 0x57, 0x54, 0xe3, 0x14, 0x9f, 0x1c, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(184);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x37, 0xa1, 0x57, 0x54, 0x30, 0x15, 0xd6, 0x0a, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(185);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x16, 0x37, 0xb1, 0x57, 0x54, 0x62, 0x1e, 0x0b, 0xdb, 0xb4, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(186);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x26, 0x37, 0xb1, 0x57, 0x54, 0x62, 0x19, 0x0a, 0x14, 0xde, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(187);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x36, 0x37, 0xb1, 0x57, 0x54, 0x62, 0x7d, 0x38, 0x0c, 0x7a, 0x9d, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(188);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x46, 0x37, 0xb1, 0x57, 0x54, 0x62, 0x1b, 0x1e, 0xad, 0xb1, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(189);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x37, 0xb5, 0x57, 0x54, 0x62, 0x7d, 0x3a, 0x09, 0xc7, 0x43, 0x7e, 0x66, 0x37, 0xb1, 0x57, 0x54, 0x36, 0x1e, 0xb2, 0xdf, 0x44, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(191);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x76, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x66, 0x8b, 0x94, 0x7c, 0x25, 0xfb, 0x54, 0xa4, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x59, 0xd0, 0xc6, 0x63, 0x2b, 0x5a, 0x97, 0xc1, 0xcc, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0x74, 0x80, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(192);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x62, 0x5f, 0x94, 0x40, 0x25, 0xfe, 0x55, 0x98, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x8d, 0xfc, 0xc6, 0x63, 0x2b, 0x8c, 0xe1, 0xca, 0x2c, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x04, 0xdd, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x29, 0xe6, 0xc2, 0x96, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(193);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x16, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x66, 0xd7, 0x94, 0x72, 0x25, 0xfb, 0x54, 0xaa, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x05, 0xd1, 0xc6, 0x63, 0x2b, 0x85, 0x90, 0xeb, 0x86, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0x07, 0x86, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(194);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x26, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x63, 0xd7, 0x94, 0x4f, 0x25, 0xfe, 0x55, 0x97, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x05, 0xfd, 0xc6, 0x63, 0x2b, 0xa7, 0xa8, 0x81, 0x71, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0xa8, 0x9a, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(195);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x36, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x63, 0xc4, 0x94, 0x7a, 0x25, 0xfb, 0x54, 0xa2, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x16, 0xd1, 0xc6, 0x63, 0x2b, 0xe6, 0xb7, 0x6c, 0x1b, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x54, 0xdc, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x79, 0xe5, 0xd1, 0xd7, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(196);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x46, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x60, 0xed, 0x94, 0x46, 0x25, 0xfe, 0x55, 0x9e, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x3f, 0xfd, 0xc6, 0x63, 0x2b, 0x5b, 0xf8, 0x6c, 0x96, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x0d, 0xdd, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x00, 0xe6, 0x1e, 0xfe, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(197);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x63, 0xe0, 0x94, 0x7f, 0x25, 0xfb, 0x54, 0xa7, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x32, 0xd1, 0xc6, 0x63, 0x2b, 0x40, 0x5b, 0x9b, 0x77, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0xd4, 0x44, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(198);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x15, 0x60, 0x36, 0x94, 0x7d, 0x5d, 0x25, 0xfb, 0x54, 0xa5, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xe9, 0xce, 0x66, 0xe4, 0xd1, 0xc6, 0x63, 0x2b, 0xc0, 0xfa, 0x61, 0xff, 0xe9, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0x50, 0xde, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(199);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x76, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x60, 0x23, 0x94, 0x5b, 0x25, 0xfe, 0x55, 0x83, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0xf1, 0xfd, 0xc6, 0x63, 0x2b, 0xfd, 0xbb, 0x6d, 0xbe, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x15, 0xdd, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0xab, 0xe7, 0x19, 0x35, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(200);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x60, 0xbe, 0x94, 0x7d, 0x5e, 0x25, 0xfb, 0x54, 0xa6, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x6c, 0xd1, 0xc6, 0x63, 0x2b, 0x0c, 0x6a, 0xff, 0x37, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0x53, 0x33, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(201);

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x16, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x64, 0x25, 0x94, 0x78, 0x25, 0xfb, 0x54, 0xa0, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0xf7, 0xd1, 0xc6, 0x63, 0x2b, 0xe4, 0x07, 0x7d, 0x5e, 0x74, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0xa3, 0xdc, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x71, 0xe5, 0xdb, 0x0f, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(202);

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x26, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x15, 0x61, 0xbd, 0x94, 0x7b, 0x25, 0xfb, 0x54, 0xa3, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xe9, 0xce, 0x66, 0x6f, 0xd1, 0xc6, 0x63, 0x2b, 0x79, 0x8e, 0xb0, 0xd3, 0xeb, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0xa2, 0xdc, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x67, 0xe5, 0x8e, 0x86, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(203);

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x36, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x67, 0x8a, 0x94, 0x7c, 0x25, 0xfb, 0x54, 0xa4, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x58, 0xd0, 0xc6, 0x63, 0x2b, 0x7d, 0x38, 0x39, 0xd4, 0xfe, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0xdf, 0xe3, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(204);

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x46, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x60, 0x5e, 0x94, 0x40, 0x25, 0xfe, 0x55, 0x98, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x8c, 0xfc, 0xc6, 0x63, 0x2b, 0x29, 0x72, 0xd5, 0x6c, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x04, 0xdd, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x2b, 0xe6, 0x45, 0xab, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(205);

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x61, 0xd6, 0x94, 0x72, 0x25, 0xfb, 0x54, 0xaa, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x04, 0xd1, 0xc6, 0x63, 0x2b, 0x4e, 0x16, 0x37, 0xff, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0xf5, 0xdb, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(206);

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x60, 0xd6, 0x94, 0x4f, 0x25, 0xfe, 0x55, 0x97, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x04, 0xfd, 0xc6, 0x63, 0x2b, 0x3a, 0xa8, 0x16, 0x77, 0x14, 0xc1, 0xd1, 0x6f, 0xda, 0xff, 0xd7, 0xdb, 0xda, 0xd2, 0x3c, 0x8c, 0x56, 0x23, 0x88, 0x0a, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(207);

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x76, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x63, 0xc7, 0x94, 0x7a, 0x25, 0xfb, 0x54, 0xa2, 0x49, 0xcd, 0x4f, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x15, 0xd1, 0xc6, 0x63, 0x2b, 0xe6, 0x02, 0xda, 0x5b, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x56, 0xdc, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x64, 0xe5, 0x6c, 0x26, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(208);

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	uartDriver.scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x37, 0xb1, 0x57, 0x54, 0xef, 0x6a, 0x61, 0xec, 0x94, 0x46, 0x25, 0xfe, 0x55, 0x9e, 0x49, 0xc8, 0x4e, 0xe6, 0xa9, 0xec, 0xce, 0x66, 0x3e, 0xfd, 0xc6, 0x63, 0x2b, 0x34, 0x77, 0xf5, 0x20, 0x14, 0xc3, 0xdc, 0x6b, 0x8f, 0xff, 0xee, 0x0c, 0xdd, 0xd7, 0x6d, 0x8c, 0x46, 0x02, 0x0c, 0xe6, 0x4e, 0x63, 0x7e}));
	UT_WAIT_MS(25);
	UT_FAILF_UNLESS_STAGE(209);

	std::this_thread::sleep_for(std::chrono::milliseconds(1000));	/* Give 1s for final timeout (allows all written bytes to be sent by libezsp) */

	uartDriver.destroyAllScheduledIncomingChunks(); /* Destroy all uartDriver currently running thread just in case */

	NOTIFYPASS();
}


#ifndef USE_CPPUTEST
void unit_tests_gp() {
	gp_recv_sensor_measurement();
}
#endif	// USE_CPPUTEST
