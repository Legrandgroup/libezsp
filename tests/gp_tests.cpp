#include <iostream>
#include <iomanip>
#include <cstdint>

#include "spi/mock-uart/MockUartDriver.h"
#include "spi/TimerBuilder.h"
#include "spi/IAsyncDataInputObserver.h"

#include "spi/Logger.h"
#include "ezsp/lib-ezsp-main.h"
#include "../example/mainEzspStateMachine.h"

#include "ezsp/ashv2-codec.h"

#include "TestHarness.h"

using NSSPI::IAsyncDataInputObserver;
using NSSPI::Logger;
using NSSPI::LOG_LEVEL;
using NSSPI::TimerBuilder;
using NSSPI::GenericAsyncDataInputObservable;
using NSSPI::MockUartDriver;
using NSSPI::MockUartScheduledByteDelivery;

using NSEZSP::CLibEzspMain;
using NSEZSP::CGpDevice;

/**
 * @brief Class implementing an observer that validates state transition during a sample ezsp in/out test sequence
**/
class GPRecvSensorMeasurementTest : public IAsyncDataInputObserver {
public:
	/**
	 * @brief Constructor
	 *
	 * @param[in] stageTransitionExpectedList A pointer to an external list of expected buffer written to the serial line, that will automatically trigger a stage transition (stage++)
	 *            Because this is a pointer, you can update this vector on the fly during the test, we will use an always up-to-date vector each time bytes are written to the serial port.
	 *            However, this also means you have to keep the vector of vector of ByteBuffer memory allocated during the whole lifetime of this GPRecvSensorMeasurementTest object or you will have dereference crashes!
	 * @param interpretTransitionsAsRawAshFormat Shall the entries in stageTransitionExpectedList be matched against raw (ASH) serial bytes.
	 *                                           If set to false, instead, we will assume stageTransitionExpectedList contains EZSP payloads to match.
	 */
	explicit GPRecvSensorMeasurementTest(const std::vector<NSSPI::ByteBuffer>* stageTransitionExpectedList = nullptr, bool interpretTransitionsAsRawAshFormat = true) :
		serialReadObservable(nullptr),
		ash(nullptr),
		stage(0),
		nbWriteCalls(0),
		nbReadCallbacks(0),
		stageExpectedTransitions(stageTransitionExpectedList),
		expectedTransitionsRawAshFormat(interpretTransitionsAsRawAshFormat) {
	}

	/**
	 * @brief Copy constructor
	 *
	 * @warning Copy construction is not allowed on instances of this class
	 */
	GPRecvSensorMeasurementTest(const GPRecvSensorMeasurementTest& other) = delete;

	/**
	 * @brief Assignment operator
	 *
	 * @warning Assignment is not allowed on instances of this class
	 */
	GPRecvSensorMeasurementTest operator= (const GPRecvSensorMeasurementTest& other) = delete;

	/**
	 * @brief Destructor
	 */
	~GPRecvSensorMeasurementTest() {
		this->registerSerialReadObservable(nullptr);	/* Unregister ourselves as an observer */
	}

	/**
	 * @brief Write callback function to register to the mock serial interface
	 *
	 * It will be invoked each time a write() is done on the mock serial interface to which it has been registered
	 */
	int onWriteCallback(size_t& writtenCnt, const void* buf, size_t cnt, std::chrono::duration<double, std::milli> delta) {
		NSSPI::ByteBuffer writtenBuffer(static_cast<const uint8_t*>(buf), cnt);
		std::cout << "Host->emulated NCP write of " << std::dec << cnt << " bytes: " << NSSPI::Logger::byteSequenceToString(writtenBuffer);
		if (delta != std::chrono::duration<double, std::milli>::max()) {
			std::cout << ". Delta since last write: " << std::dec << (std::chrono::duration_cast<std::chrono::milliseconds>(delta)).count() << "ms";
			if (this->nbWriteCalls == 0) {
				std::cout << "\n";
				FAILF("First call to write() on mock serial interface should not lead to a valid delta\n");
			}
		}
		std::cout << " (current stage " << std::dec << this->stage << ")\n";
		//std::cout << "which decoded as EZSP payload: " << NSSPI::Logger::byteSequenceToString(this->ash.appendIncoming(writtenBuffer)) << "\n";
		writtenCnt = cnt;
		bool transitionMatch = false;
		if (this->stageExpectedTransitions!=nullptr && this->stageExpectedTransitions->size() > this->stage) {	/* Do we have an expected read buffer to automatically transition to the next stage? */
			if (compareBufWithVector(buf, cnt, (*this->stageExpectedTransitions)[this->stage])) {
				this->stage++;
				transitionMatch = true;
				std::cout << "Automatic trigger matched, transitionning to stage " << this->stage << "\n";
			}
		}
		if (!transitionMatch) {
			if (this->stage == 121 | this->stage == 122 || this->stage == 123) {	/* These stages are specific because there are parts of the buffer that come from randomness, thus cannot be strictly compared */
				std::cout << "Specific exception for parsing stage 119 to 121\n";
				//~ /* Slicing expected transition buffer to only the first 11 bytes */
				//~ std::vector<uint8_t> expectedTransitionLeading11 = (*this->stageExpectedTransitions)[this->stage];
				//~ expectedTransitionLeading11.erase(expectedTransitionLeading11.begin() + 11, expectedTransitionLeading11.end());
				//~ std::cout << "Shortened buffer is " << NSSPI::Logger::byteSequenceToString(expectedTransitionLeading11) << "\n";
				//~ if (compareBufWithVector(buf, cnt>11?11:cnt, expectedTransitionLeading11)) {
					//~ this->stage++;
					//~ transitionMatch = true;
					//~ std::cout << "Trigger matched on 11 first bytes of EZSP_GP_SINK_TABLE_SET_ENTRY, transitionning to stage " << this->stage << "\n";
				//~ }
				this->stage++;
				transitionMatch = true;
				std::cout << "Trigger matched on EZSP_SET_POLICY and EZSP_SET_INITIAL_SECURITY_STATE, transitionning to stage " << this->stage << "\n";
			}
		}
		if (!transitionMatch) {
			std::cerr << "Warning: Got an unexpected command written to emulated NCP while at stage " << std::dec << this->stage << ":\n";
			std::cerr << "Received: " << NSSPI::Logger::byteSequenceToString(writtenBuffer) << "\n";
			if (this->stageExpectedTransitions == nullptr) {
				std::cerr << "(stageExpectedTransitions==nullptr)\n";
			}
			else {
				if (this->stage < this->stageExpectedTransitions->size()) {
					std::cerr << "while expecting: " << NSSPI::Logger::byteSequenceToString((*this->stageExpectedTransitions)[this->stage]) << "\n";
				}
			}
			FAILF("Unexpected command written by host to emulated NCP");
		}
		this->nbWriteCalls++;
		return 0;
	}

	/**
	 * @brief Write callback function to register to the mock serial interface
	 *
	 * It will be invoked each time a read() is done on the mock serial interface to which it has been registered
	 */
	void onReadCallback(const unsigned char* dataIn, const size_t dataLen) {
		NSSPI::ByteBuffer inputBuffer(dataIn, dataLen);
		std::cerr << "Host<-emulated NCP notification of " << std::dec << dataLen << " bytes: " << NSSPI::Logger::byteSequenceToString(inputBuffer) << "\n";
		this->nbReadCallbacks++;
	}

	/**
	 * @brief Callback invoked on UART received bytes
	 */
	void handleInputData(const unsigned char* dataIn, const size_t dataLen) {
		this->onReadCallback(dataIn, dataLen);
	}

	/**
	 * @brief Set the serial async observable that will notify us of new incoming ASH bytes
	 *
	 * @param serialReadObservable An optional observable object used to be notified about new incoming bytes received on the serial port (or nullptr to disable read)
	 */
	void registerSerialReadObservable(NSSPI::GenericAsyncDataInputObservable* serialReadObservable) {
		if (this->serialReadObservable) {	/* First, unregister ourselves from any previous async observable */
			this->serialReadObservable->unregisterObserver(this);
		}
		this->serialReadObservable = serialReadObservable;
		if (serialReadObservable) {
			serialReadObservable->registerObserver(this);	/* Register ourselves as an async observer to receive incoming bytes received from the serial port */
		}
	}

	/**
	 * @brief expectedTransitionsRawAshFormat setter (to true)
	 */
	void setExpectedTransitionsAsRawAsh() {
		this->expectedTransitionsRawAshFormat = true;
	}

	/**
	 * @brief expectedTransitionsRawAshFormat setter (to false)
	 */
	void setExpectedTransitionsAsEzsp() {
		this->expectedTransitionsRawAshFormat = false;
	}

public:
	NSSPI::GenericAsyncDataInputObservable* serialReadObservable;	/*!< The observable object used to be notified about new incoming bytes received on the serial port */
	NSEZSP::AshCodec ash;	/*!< An ASH codec to encode/decode ASH frames */
	unsigned int stage;	/*!< Counter for the internal state machine */
	unsigned int nbWriteCalls;	/*!< How many time the onWriteCallback() was executed */
	unsigned int nbReadCallbacks;	/*!< How many time the onReadCallback() was executed */
	const std::vector<NSSPI::ByteBuffer>* stageExpectedTransitions;	/*!< A pointer to an external list of expected buffer written to the serial line, that will automatically trigger a stage transition (stage++) */
	bool expectedTransitionsRawAshFormat;	/*!< Shall stageExpectedTransitions byte buffer content be interpreted as ASH (raw serial format), if not, we will assume we compare the EZSP payload only */
};

TEST_GROUP(gp_tests) {
};

#define UT_WAIT_MS(tms) std::this_thread::sleep_for(std::chrono::milliseconds(tms)) //NOSONAR
#define UT_FAILF_UNLESS_STAGE(tstage) do {\
	if (serialProcessor.stage != tstage) \
		FAILF("Failed to transition to stage %u. Currently at stage %u instead, and expecting %s", tstage, serialProcessor.stage, \
		      (serialProcessor.stageExpectedTransitions==nullptr?\
		      	"(empty transition list)":\
		      	(serialProcessor.stage>=serialProcessor.stageExpectedTransitions->size()?\
		      		"nothing":\
		      		NSSPI::Logger::byteSequenceToString(serialProcessor.stageExpectedTransitions->at(serialProcessor.stage)).c_str()\
		      	)\
		      )\
		     ); \
	else \
		std::cout << "Passed stage " << tstage << " checkpoint (test running at line " << +__LINE__ << ")\n"; \
	} while(0) //NOSONAR


#define GPD_KEY { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa }
TEST(gp_tests, gp_recv_sensor_measurement) {
	TimerBuilder timerBuilder;
	Logger::getInstance()->setLogLevel(LOG_LEVEL::DEBUG);	/* Only display logs for debug level info and higher (up to error) */
	std::vector<NSSPI::ByteBuffer> stageExpectedTransitions;
	GenericAsyncDataInputObservable uartIncomingDataHandler;
	GPRecvSensorMeasurementTest serialProcessor(&stageExpectedTransitions, true);
	auto wcb = [&serialProcessor](size_t& writtenCnt, const void* buf, size_t cnt, std::chrono::duration<double, std::milli> delta) -> int {
		return serialProcessor.onWriteCallback(writtenCnt, buf, cnt, delta);
	};
	/* Analysis is disabled on the line below because we need a share_ptr, and make_shared is available only from C++14, so dynamic allocation has to be explicitely done here */
	std::shared_ptr<MockUartDriver> mockUartDriverHandle(new MockUartDriver(wcb));	//NOSONAR
	if (mockUartDriverHandle->open("/dev/ttyUSB0", 115200) != 0) {
		FAILF("Failed opening mock serial port");
	}

	stageExpectedTransitions.push_back({0x1a, 0xc0, 0x38, 0xbc, 0x7e});
	std::vector<CGpDevice> GPDList;

	GPDList.push_back(CGpDevice(0x01510037U, GPD_KEY));
	NSEZSP::CEzsp lib_main(static_cast<NSSPI::IUartDriverHandle>(mockUartDriverHandle), timerBuilder, 26);
	NSMAIN::MainStateMachine fsm(timerBuilder, lib_main, false /* no -G */, 60 /* -C 60 */, false /* no -Z */, true /* -r '*' */, GPDList, std::vector<uint32_t>() /* no -r source_ID/key */, false /* no -k */, false /* no -w */);
	auto clibobs = [&fsm, &lib_main](NSEZSP::CLibEzspState i_state) {
		try {
			fsm.ezspStateChangeCallback(i_state);
		}
		catch (const std::exception& e) {
			FAILF("Internal exception in MaineStateMachine");
		}
	};
	lib_main.registerLibraryStateCallback(clibobs);

	auto gprecvobs = [&fsm](NSEZSP::CGpFrame &i_gpf) {
		fsm.onReceivedGPFrame(i_gpf);
	};
	lib_main.registerGPFrameRecvCallback(gprecvobs);

	lib_main.start();

	/* To get the exact trace tested below:
	 * Compile mainEzspTest on a machine with a real dongle connecter (either in the Raritan framework or under plain Linux)
	 * (thus, do not use the mock serial)
	 * Also compile the serial SPI with debug enabled (for libserial, this means adding a #define SERIAL_DEBUG in SerialUartDriver.cpp
	 * Run a script session (to log all console I/O into a file)
	 * Now, execute mainEzspTest while capturing reads/writes from/to serial port.
	 * The equivalent command for this test sequence is: mainEzspTest -c 11 -C 60 -r '*' -s '0x0050abcd/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' -d
	 * We use -d here because SerialUartDriver outputs read/writes logs as debug level
	 * Process the logs to generate a unit test script to update the expected I/O below */

	UT_WAIT_MS(500);	/* Give 500ms for libezsp's internal process to write to serial */
	UT_FAILF_UNLESS_STAGE(1);

	serialProcessor.setExpectedTransitionsAsEzsp();	/* Now all traffic below will be formatted as EZSP */

	stageExpectedTransitions.push_back({0x00, 0x42, 0x21, 0xa8, 0x52, 0xcd, 0x6e, 0x7e });

	serialProcessor.registerSerialReadObservable(lib_main.getAdapterSerialReadObservable());

	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x1a, 0xc1, 0x02, 0x0b, 0x0a, 0x52, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x43, 0x21, 0xa9, 0x54, 0x2a, 0x1d, 0xc9, 0x7f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x42, 0xa1, 0xa8, 0x5c, 0x28, 0x45, 0xd5, 0x3b, 0xac, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x40, 0x21, 0xa9, 0x47, 0x2a, 0xd2, 0xb4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x43, 0xa1, 0xa9, 0x54, 0x2a, 0x1d, 0xb0, 0x09, 0xf3, 0x77, 0x54, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x41, 0x21, 0xa9, 0x07, 0x2a, 0x17, 0x92, 0x59, 0x44, 0xfd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x40, 0xa1, 0xa9, 0x47, 0x2a, 0x15, 0x93, 0x49, 0x97, 0x6b, 0x8a, 0x79, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x46, 0x21, 0xa9, 0x07, 0x2a, 0x16, 0xb8, 0x59, 0x47, 0x88, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x41, 0xa1, 0xa9, 0x07, 0x2a, 0x23, 0xa7, 0xbd, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x47, 0x21, 0xa9, 0x07, 0x2a, 0x7d, 0x31, 0xb2, 0x59, 0xd2, 0xdd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x46, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x05, 0x69, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x44, 0x21, 0xa9, 0x07, 0x2a, 0x10, 0xf2, 0x59, 0xf9, 0x12, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x47, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xaf, 0x30, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x45, 0x21, 0xa9, 0x07, 0x2a, 0x7d, 0x33, 0xba, 0x59, 0xdb, 0x29, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x44, 0xa1, 0xa9, 0x07, 0x2a, 0x20, 0xe6, 0xca, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x4a, 0x21, 0xa9, 0x07, 0x2a, 0x12, 0x92, 0x59, 0xa0, 0xe4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x45, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xeb, 0xa3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x4b, 0x21, 0xa9, 0x07, 0x2a, 0x1d, 0xa2, 0x59, 0x76, 0x4e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x4a, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x12, 0xa0, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x48, 0x21, 0xa9, 0x07, 0x2a, 0x19, 0xb0, 0x59, 0xde, 0xac, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x4b, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xb8, 0xf9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x49, 0x21, 0xa9, 0x07, 0x2a, 0x7d, 0x38, 0xb7, 0x59, 0x8f, 0x05, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x48, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x97, 0xf5, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x4e, 0x21, 0xa9, 0x07, 0x2a, 0x05, 0xbd, 0x59, 0xbc, 0x94, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x49, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xfc, 0x6a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x4f, 0x21, 0xa9, 0x07, 0x2a, 0x04, 0x92, 0x59, 0x62, 0x72, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x4e, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x08, 0x2b, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x4c, 0x21, 0xa9, 0x07, 0x2a, 0x07, 0x0a, 0x52, 0x0a, 0x38, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x4f, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xa2, 0x72, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x4d, 0x21, 0xa9, 0x07, 0x2a, 0x06, 0xb7, 0x59, 0x1b, 0x3c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x4c, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x8d, 0x7d, 0x5e, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x52, 0x21, 0xa9, 0x07, 0x2a, 0x01, 0xa6, 0x59, 0x50, 0xe8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x4d, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xe6, 0xe1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x53, 0x21, 0xa9, 0x07, 0x2a, 0x00, 0xb2, 0x59, 0x57, 0x61, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x52, 0xa1, 0xa9, 0x07, 0x2a, 0x22, 0x43, 0xd2, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x50, 0x21, 0xa9, 0x07, 0x2a, 0x02, 0xb2, 0x59, 0x28, 0x32, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x53, 0xa1, 0xa9, 0x07, 0x2a, 0x22, 0xe9, 0x8b, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x51, 0x21, 0xa9, 0x07, 0x2a, 0x0d, 0xb2, 0x59, 0xfb, 0x0d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x50, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x80, 0x33, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x56, 0x21, 0xa9, 0x07, 0x2a, 0x0c, 0xb2, 0x59, 0x7d, 0x31, 0x55, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x51, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xeb, 0xac, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x57, 0x21, 0xa9, 0x07, 0x2a, 0x0f, 0xb2, 0x59, 0xb7, 0x0b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x56, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x1f, 0xed, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x54, 0x21, 0xa9, 0x07, 0x2a, 0x0e, 0xb4, 0x59, 0x3b, 0xae, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x57, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xb5, 0xb4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x55, 0x21, 0xa9, 0x07, 0x2a, 0x09, 0xb2, 0x59, 0xeb, 0x96, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x54, 0xa1, 0xa9, 0x07, 0x2a, 0x22, 0xdc, 0x0c, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x5a, 0x21, 0xa9, 0x07, 0x2a, 0x08, 0xb2, 0x59, 0x1f, 0x14, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x55, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xf1, 0x27, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x5b, 0x21, 0xa9, 0x07, 0x2a, 0x0b, 0xbe, 0x59, 0xfc, 0x27, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x5a, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x08, 0x24, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x58, 0x21, 0xa9, 0x07, 0x2a, 0x0a, 0xf2, 0x5f, 0xf2, 0x43, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x5b, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xa2, 0x7d, 0x5d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x59, 0x21, 0xa9, 0x07, 0x2a, 0x35, 0xb1, 0x59, 0xdc, 0x80, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x58, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x8d, 0x71, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x5e, 0x21, 0xa9, 0x07, 0x2a, 0x34, 0x8e, 0x59, 0x23, 0x73, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x59, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xe6, 0xee, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x5f, 0x21, 0xa9, 0x07, 0x2a, 0x37, 0xb3, 0x59, 0xf6, 0xe4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x5e, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x12, 0xaf, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x5c, 0x21, 0xa9, 0x07, 0x2a, 0x31, 0xb2, 0x59, 0x66, 0x46, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x5f, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xb8, 0xf6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x5d, 0x21, 0xa9, 0x07, 0x2a, 0x3f, 0xb2, 0x59, 0x82, 0x49, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x5c, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x97, 0xfa, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x62, 0x21, 0xa9, 0x07, 0x2a, 0x3e, 0xbd, 0x59, 0x20, 0x29, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x5d, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xfc, 0x65, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x63, 0x21, 0xa9, 0x07, 0x2a, 0x39, 0xb2, 0x59, 0x4a, 0x89, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x62, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x2a, 0xea, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x60, 0x21, 0xa9, 0x07, 0x2a, 0x38, 0xb3, 0x59, 0x5f, 0xbb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x63, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x80, 0xb3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x61, 0x21, 0xa9, 0x07, 0x2a, 0x3b, 0xb2, 0x59, 0xca, 0xd4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x60, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xaf, 0xbf, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x66, 0x21, 0xa9, 0x07, 0x2a, 0x3a, 0xb2, 0x59, 0x20, 0x8c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x61, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xc4, 0x20, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x67, 0x21, 0xa9, 0x07, 0x2a, 0x26, 0xb3, 0x59, 0xda, 0xb1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x66, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x30, 0x61, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x64, 0x21, 0xa9, 0x07, 0x2a, 0x21, 0xba, 0x59, 0xf4, 0x8a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x67, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x9a, 0x38, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x65, 0x21, 0xa9, 0x07, 0x2a, 0x20, 0xb8, 0x59, 0x5a, 0xd6, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x64, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xb5, 0x34, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x6a, 0x21, 0xa9, 0x07, 0x2a, 0x23, 0x9e, 0x58, 0x7c, 0x55, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x65, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xde, 0xab, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x6b, 0x21, 0xa9, 0x07, 0x2a, 0x22, 0xb3, 0x59, 0xd4, 0xf0, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x6a, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x27, 0xa8, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x68, 0x21, 0xa9, 0x07, 0x2a, 0x2d, 0xea, 0x5b, 0x7d, 0x5d, 0x97, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x6b, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0x8d, 0xf1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x33, 0x69, 0x21, 0xa9, 0x07, 0x2a, 0x14, 0x4d, 0x59, 0x7d, 0x5d, 0x06, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x68, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xa2, 0xfd, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x44, 0x6e, 0x21, 0xa9, 0x01, 0x2a, 0x15, 0xb3, 0xe7, 0x2c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x34, 0x69, 0xa1, 0xa9, 0x07, 0x2a, 0x15, 0xc9, 0x62, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x55, 0x6f, 0x21, 0xa9, 0x01, 0x2a, 0x7d, 0x31, 0xf2, 0xb1, 0x0b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x45, 0x6e, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0x8f, 0x83, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x66, 0x6c, 0x21, 0xa9, 0x01, 0x2a, 0x14, 0xa0, 0x62, 0x62, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x6f, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0x25, 0xda, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x77, 0x6d, 0x21, 0xa9, 0x01, 0x2a, 0x16, 0x82, 0xc2, 0x26, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x67, 0x6c, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0x0a, 0xd6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x00, 0x72, 0x21, 0xa9, 0x56, 0x2a, 0x14, 0xb6, 0x58, 0x93, 0x4a, 0x25, 0xab, 0x54, 0x92, 0x49, 0x9c, 0x4e, 0x98, 0x6a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x6d, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0x61, 0x49, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x31, 0x73, 0x21, 0xa9, 0x56, 0x2a, 0xe7, 0xbc, 0xf8, 0xf0, 0x4a, 0x25, 0xab, 0x54, 0xb3, 0x49, 0xbd, 0x4e, 0xdf, 0x80, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x01, 0x72, 0xa1, 0xa9, 0x56, 0x2a, 0x15, 0x59, 0x90, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x22, 0x70, 0x21, 0xa9, 0x43, 0x2a, 0x12, 0x9e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x12, 0x73, 0xa1, 0xa9, 0x56, 0x2a, 0x15, 0xf3, 0xc9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x34, 0x71, 0x21, 0xa9, 0x43, 0x2a, 0x2f, 0xaa, 0x7e});
	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x23, 0x70, 0xa5, 0xa9, 0x43, 0x2a, 0x15, 0xfd, 0x50, 0x7e, 0x33, 0x70, 0xb1, 0xa9, 0x4d, 0x2a, 0x85, 0xdf, 0xcf, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x45, 0x76, 0x21, 0xa9, 0x4c, 0x2a, 0x58, 0x7c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x44, 0x71, 0xa1, 0xa9, 0x43, 0x2a, 0x65, 0xe5, 0x3f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x56, 0x77, 0x21, 0xa9, 0x4c, 0x2a, 0x26, 0x49, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x55, 0x76, 0xa1, 0xa9, 0x4c, 0x2a, 0x17, 0xd0, 0x80, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x67, 0x74, 0x21, 0xa9, 0x4c, 0x2a, 0xa2, 0xb7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x77, 0xa1, 0xa9, 0x4c, 0x2a, 0x17, 0x14, 0x2f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x70, 0x75, 0x21, 0xa9, 0x74, 0x2a, 0x56, 0x1f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x77, 0x74, 0xa1, 0xa9, 0x4c, 0x2a, 0x17, 0x55, 0xd5, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x00, 0x75, 0xa1, 0xa9, 0x74, 0x2a, 0x15, 0xc1, 0x16, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x02, 0x7a, 0x21, 0xa9, 0x4c, 0x2a, 0x71, 0x06, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x10, 0x75, 0xb1, 0xa9, 0x4d, 0x2a, 0x84, 0x3a, 0x9b, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x7d, 0x33, 0x7b, 0x21, 0xa9, 0x01, 0x2a, 0x15, 0xb3, 0xa5, 0x8c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x21, 0x7a, 0xa1, 0xa9, 0x4c, 0x2a, 0x15, 0xbe, 0x86, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x24, 0x78, 0x21, 0xa9, 0x01, 0x2a, 0x10, 0xe2, 0x49, 0xeb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x32, 0x7b, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0x4b, 0x23, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x35, 0x79, 0x21, 0xa9, 0x3c, 0x2a, 0x7d, 0x31, 0xb9, 0x03, 0xfd, 0x2d, 0x67, 0xcf, 0x30, 0xd3, 0x25, 0xf0, 0x27, 0x46, 0xc5, 0x8e, 0xab, 0x57, 0xb2, 0x82, 0x0e, 0xe1, 0x12, 0x9b, 0x70, 0xd5, 0x51, 0xd8, 0x8d, 0x7a, 0xfc, 0x3f, 0x9f, 0xd1, 0xe8, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x45, 0x04, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x43, 0x78, 0xa1, 0xa9, 0x01, 0x2a, 0x15, 0xb9, 0xc3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x46, 0x7d, 0x5e, 0x21, 0xa9, 0x4a, 0x2a, 0x15, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x47, 0x2c, 0x9f, 0x45, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0xcc, 0xec, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x54, 0x79, 0xa1, 0xa9, 0x3c, 0x2a, 0x15, 0x55, 0xa8, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x7f, 0x21, 0xa9, 0x24, 0x2a, 0x2b, 0x06, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x65, 0x7d, 0x5e, 0xa5, 0xa9, 0x4a, 0x2a, 0x15, 0x9f, 0xab, 0x7e, 0x75, 0x7d, 0x5e, 0xb1, 0xa9, 0x4d, 0x2a, 0x85, 0x23, 0xa5, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x7c, 0x21, 0xa9, 0x7c, 0x2a, 0x28, 0xee, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x7f, 0xa1, 0xa9, 0x24, 0x2a, 0x0b, 0x4b, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x7d, 0x5d, 0x21, 0xa9, 0xb6, 0x2a, 0xaf, 0x44, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x7c, 0xa1, 0xa9, 0x7c, 0x2a, 0x15, 0xb3, 0x33, 0xec, 0x3d, 0x9a, 0x92, 0xbd, 0xad, 0xac, 0x49, 0x2b, 0x24, 0xa0, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0x3e, 0x9c, 0x8e, 0x5b, 0xff, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x02, 0x21, 0xa9, 0x9c, 0x2a, 0x15, 0xbf, 0x09, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x7d, 0x5d, 0xa1, 0xa9, 0xb6, 0x2a, 0x89, 0xa8, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x03, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0xe8, 0x01, 0x05, 0x92, 0x84, 0x37, 0x1e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x01, 0x23, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x02, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0xb3, 0xe1, 0xd4, 0x4a, 0x25, 0xaa, 0x98, 0x39, 0x19, 0x9c, 0x83, 0x8c, 0xfb, 0xed, 0xce, 0x67, 0x8b, 0xef, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x2e, 0x85, 0xd8, 0x89, 0x8b, 0x09, 0xf8, 0x77, 0x5e, 0x71, 0x6e, 0x1e, 0xb4, 0x62, 0xb9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4e, 0x73, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x00, 0x21, 0xa9, 0x9c, 0x2a, 0x14, 0xeb, 0xbb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x03, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x8a, 0xc4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x01, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc0, 0x7d, 0x3a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x00, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xfc, 0x9d, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x06, 0x21, 0xa9, 0x9c, 0x2a, 0x17, 0x85, 0xc0, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x01, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xce, 0x57, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x07, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x50, 0x0e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x06, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf0, 0x74, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x04, 0x21, 0xa9, 0x9c, 0x2a, 0x16, 0xd1, 0x72, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x07, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x90, 0x4f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x05, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x20, 0x02, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x04, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x12, 0x7d, 0x5d, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x0a, 0x21, 0xa9, 0x9c, 0x2a, 0x7d, 0x31, 0xf2, 0xcf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x05, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xd4, 0xdc, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x0b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x89, 0x9f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x0a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd9, 0x0d, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x08, 0x21, 0xa9, 0x9c, 0x2a, 0x10, 0xa6, 0x7d, 0x5d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x0b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x87, 0x86, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x09, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xf9, 0x93, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x08, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3b, 0x04, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x0e, 0x21, 0xa9, 0x9c, 0x2a, 0x7d, 0x33, 0xc8, 0x06, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x09, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xc3, 0x15, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x0f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x69, 0x87, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x0e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x37, 0xed, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x0c, 0x21, 0xa9, 0x9c, 0x2a, 0x12, 0x9c, 0xb4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x0f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x9d, 0x0d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x0d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x19, 0x8b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x0c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd5, 0xe4, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x12, 0x21, 0xa9, 0x9c, 0x2a, 0x1d, 0x24, 0x85, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x0d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xd9, 0x9e, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x7d, 0x33, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc3, 0x04, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x12, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x81, 0x87, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x10, 0x21, 0xa9, 0x9c, 0x2a, 0x1c, 0x70, 0x37, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x7d, 0x33, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x90, 0x40, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x7d, 0x31, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb3, 0x08, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x10, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x63, 0x8e, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x16, 0x21, 0xa9, 0x9c, 0x2a, 0x1f, 0x1e, 0x4c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x7d, 0x31, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xd4, 0xd3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x17, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x23, 0x1c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x16, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x6f, 0x67, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x14, 0x21, 0xa9, 0x9c, 0x2a, 0x1e, 0x4a, 0xfe, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x17, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x8a, 0xcb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x15, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x53, 0x10, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x14, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8d, 0x6e, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x7d, 0x3a, 0x21, 0xa9, 0x9c, 0x2a, 0x19, 0x69, 0x43, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x15, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xce, 0x58, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x1b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfa, 0x8d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x7d, 0x3a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x46, 0x1e, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x7d, 0x38, 0x21, 0xa9, 0x9c, 0x2a, 0x7d, 0x38, 0x3d, 0xf1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x1b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x9d, 0x02, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x19, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8a, 0x81, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x7d, 0x38, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa4, 0x17, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x1e, 0x21, 0xa9, 0x9c, 0x2a, 0x1b, 0x53, 0x8a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x19, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xd9, 0x91, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x1f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x7d, 0x3a, 0x95, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x1e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa8, 0xfe, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x1c, 0x21, 0xa9, 0x9c, 0x2a, 0x7d, 0x3a, 0x07, 0x38, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x1f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x87, 0x89, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x1d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6a, 0x99, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x1c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4a, 0xf7, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x22, 0x21, 0xa9, 0x9c, 0x2a, 0x05, 0x98, 0x30, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x1d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xc3, 0x7d, 0x3a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x23, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x56, 0x32, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x22, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x30, 0x93, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x20, 0x21, 0xa9, 0x9c, 0x2a, 0x04, 0xcc, 0x82, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x23, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xbf, 0xcc, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x21, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x26, 0x3e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x20, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd2, 0x9a, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x26, 0x21, 0xa9, 0x9c, 0x2a, 0x07, 0xa2, 0xf9, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x21, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xfb, 0x5f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x27, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb6, 0x2a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x26, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xde, 0x73, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x24, 0x21, 0xa9, 0x9c, 0x2a, 0x06, 0xf6, 0x4b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x27, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xa5, 0x47, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x25, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc6, 0x26, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x24, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3c, 0x7a, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x2a, 0x21, 0xa9, 0x9c, 0x2a, 0x01, 0xd5, 0xf6, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x25, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xe1, 0xd4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x2b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6f, 0xbb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x2a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf7, 0x0a, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x28, 0x21, 0xa9, 0x9c, 0x2a, 0x00, 0x81, 0x44, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x2b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xb2, 0x8e, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x29, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1f, 0xb7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x28, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x15, 0x03, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x2e, 0x21, 0xa9, 0x9c, 0x2a, 0x03, 0xef, 0x3f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x29, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xf6, 0x1d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x2f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8f, 0xa3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x2e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x19, 0xea, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x2c, 0x21, 0xa9, 0x9c, 0x2a, 0x02, 0xbb, 0x8d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x2f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xa8, 0x05, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x2d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xff, 0xaf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x2c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xfb, 0xe3, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x32, 0x21, 0xa9, 0x9c, 0x2a, 0x0d, 0x03, 0xbc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x2d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xec, 0x96, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x33, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x25, 0x20, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x32, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xaf, 0x80, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x30, 0x21, 0xa9, 0x9c, 0x2a, 0x0c, 0x57, 0x0e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x33, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xa5, 0x48, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x31, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x55, 0x2c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x30, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4d, 0x89, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x36, 0x21, 0xa9, 0x9c, 0x2a, 0x0f, 0x39, 0x75, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x31, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xe1, 0xdb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x37, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc5, 0x38, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x36, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x41, 0x60, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x34, 0x21, 0xa9, 0x9c, 0x2a, 0x0e, 0x6d, 0xc7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x37, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xbf, 0xc3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x35, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb5, 0x34, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x34, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa3, 0x69, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x3a, 0x21, 0xa9, 0x9c, 0x2a, 0x09, 0x4e, 0x7a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x35, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xfb, 0x50, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x3b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1c, 0xa9, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x3a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x68, 0x19, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x38, 0x21, 0xa9, 0x9c, 0x2a, 0x08, 0x7d, 0x3a, 0xc8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x3b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xa8, 0x0a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x39, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6c, 0xa5, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x38, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8a, 0x10, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x3e, 0x21, 0xa9, 0x9c, 0x2a, 0x0b, 0x74, 0xb3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x39, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xec, 0x99, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x3f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfc, 0xb1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x3e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x86, 0xf9, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x3c, 0x21, 0xa9, 0x9c, 0x2a, 0x0a, 0x20, 0x01, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x3f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xb2, 0x81, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x3d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8c, 0xbd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x3c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x64, 0xf0, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xc2, 0x21, 0xa9, 0x9c, 0x2a, 0x35, 0x25, 0x5b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x3d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xf6, 0x12, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xc3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc4, 0x8c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xc2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xfa, 0x86, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xc0, 0x21, 0xa9, 0x9c, 0x2a, 0x34, 0x71, 0xe9, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xc3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x34, 0xf4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xc1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb4, 0x80, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xc0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x7d, 0x38, 0x8f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xc6, 0x21, 0xa9, 0x9c, 0x2a, 0x37, 0x1f, 0x92, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xc1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x70, 0x67, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xc7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x24, 0x94, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xc6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x14, 0x66, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xc4, 0x21, 0xa9, 0x9c, 0x2a, 0x36, 0x4b, 0x20, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xc7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x2e, 0x7f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xc5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x54, 0x98, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xc4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf6, 0x6f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xca, 0x21, 0xa9, 0x9c, 0x2a, 0x31, 0x68, 0x9d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xc5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x6a, 0xec, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xcb, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfd, 0x05, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xca, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3d, 0x1f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xc8, 0x21, 0xa9, 0x9c, 0x2a, 0x30, 0x3c, 0x2f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xcb, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x39, 0xb6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xc9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8d, 0x09, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xc8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xdf, 0x16, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xce, 0x21, 0xa9, 0x9c, 0x2a, 0x33, 0x52, 0x54, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xc9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7d, 0x5d, 0x25, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xcf, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1d, 0x1d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xce, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd3, 0xff, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xcc, 0x21, 0xa9, 0x9c, 0x2a, 0x32, 0x06, 0xe6, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xcf, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x23, 0x3d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xcd, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6d, 0x7d, 0x31, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xcc, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x31, 0xf6, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xd2, 0x21, 0xa9, 0x9c, 0x2a, 0x3d, 0xbe, 0xd7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xcd, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x67, 0xae, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xd3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb7, 0x9e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xd2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x65, 0x95, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xd0, 0x21, 0xa9, 0x9c, 0x2a, 0x3c, 0xea, 0x65, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xd3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x2e, 0x70, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xd1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc7, 0x92, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xd0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x87, 0x9c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xd6, 0x21, 0xa9, 0x9c, 0x2a, 0x3f, 0x84, 0x1e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xd1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x6a, 0xe3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xd7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x57, 0x86, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xd6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8b, 0x75, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xd4, 0x21, 0xa9, 0x9c, 0x2a, 0x3e, 0xd0, 0xac, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xd7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x34, 0xfb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xd5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x27, 0x8a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xd4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x69, 0x7c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xda, 0x21, 0xa9, 0x9c, 0x2a, 0x39, 0xf3, 0x7d, 0x31, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xd5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x70, 0x68, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xdb, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8e, 0x17, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xda, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa2, 0x0c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xd8, 0x21, 0xa9, 0x9c, 0x2a, 0x38, 0xa7, 0xa3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xdb, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x23, 0x32, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xd9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfe, 0x1b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xd8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x40, 0x05, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xde, 0x21, 0xa9, 0x9c, 0x2a, 0x3b, 0xc9, 0xd8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xd9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x67, 0xa1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xdf, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6e, 0x0f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xde, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4c, 0xec, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xdc, 0x21, 0xa9, 0x9c, 0x2a, 0x3a, 0x9d, 0x6a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xdf, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x39, 0xb9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xdd, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1e, 0x03, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xdc, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xae, 0xe5, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xe2, 0x21, 0xa9, 0x9c, 0x2a, 0x25, 0x02, 0x62, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xdd, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7d, 0x5d, 0x2a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xe3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x22, 0xa8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xe2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd4, 0x81, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xe0, 0x21, 0xa9, 0x9c, 0x2a, 0x24, 0x56, 0xd0, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xe3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x01, 0xfc, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xe1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x52, 0xa4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xe0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x36, 0x88, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xe6, 0x21, 0xa9, 0x9c, 0x2a, 0x27, 0x38, 0xab, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xe1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x45, 0x6f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xe7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc2, 0xb0, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xe6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3a, 0x61, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xe4, 0x21, 0xa9, 0x9c, 0x2a, 0x26, 0x6c, 0x19, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xe7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x1b, 0x77, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xe5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb2, 0xbc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xe4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd8, 0x68, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xea, 0x21, 0xa9, 0x9c, 0x2a, 0x21, 0x4f, 0xa4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xe5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x5f, 0xe4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xeb, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1b, 0x21, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xea, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x7d, 0x33, 0x7d, 0x38, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xe8, 0x21, 0xa9, 0x9c, 0x2a, 0x20, 0x1b, 0x16, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xeb, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x0c, 0xbe, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xe9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6b, 0x2d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xe8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf1, 0x7d, 0x31, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xee, 0x21, 0xa9, 0x9c, 0x2a, 0x23, 0x75, 0x6d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xe9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x48, 0x2d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xef, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfb, 0x39, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xee, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xfd, 0xf8, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xec, 0x21, 0xa9, 0x9c, 0x2a, 0x22, 0x21, 0xdf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xef, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x16, 0x35, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xed, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8b, 0x35, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xec, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x1f, 0xf1, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xf2, 0x21, 0xa9, 0x9c, 0x2a, 0x2d, 0x99, 0xee, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xed, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x52, 0xa6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xf3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x51, 0xba, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xf2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4b, 0x92, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xf0, 0x21, 0xa9, 0x9c, 0x2a, 0x2c, 0xcd, 0x5c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xf3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x1b, 0x78, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xf1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x21, 0xb6, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xf0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa9, 0x9b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xf6, 0x21, 0xa9, 0x9c, 0x2a, 0x2f, 0xa3, 0x27, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xf1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x5f, 0xeb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xf7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb1, 0xa2, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xf6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa5, 0x72, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xf4, 0x21, 0xa9, 0x9c, 0x2a, 0x2e, 0xf7, 0x95, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xf7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x01, 0xf3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xf5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc1, 0xae, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xf4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x47, 0x7b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xfa, 0x21, 0xa9, 0x9c, 0x2a, 0x29, 0xd4, 0x28, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xf5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x45, 0x60, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xfb, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x68, 0x33, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xfa, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8c, 0x0b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xf8, 0x21, 0xa9, 0x9c, 0x2a, 0x28, 0x80, 0x9a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xfb, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x16, 0x3a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xf9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x7d, 0x38, 0x3f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xf8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x6e, 0x02, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xfe, 0x21, 0xa9, 0x9c, 0x2a, 0x2b, 0xee, 0xe1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xf9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x52, 0xa9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xff, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x88, 0x2b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xfe, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x62, 0xeb, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xfc, 0x21, 0xa9, 0x9c, 0x2a, 0x2a, 0xba, 0x53, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xff, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x0c, 0xb1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xfd, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xf8, 0x27, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xfc, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x80, 0xe2, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x82, 0x21, 0xa9, 0x9c, 0x2a, 0x55, 0x23, 0xed, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xfd, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x48, 0x22, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x83, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x7d, 0x38, 0xe5, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x82, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa6, 0x88, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x80, 0x21, 0xa9, 0x9c, 0x2a, 0x54, 0x77, 0x5f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x83, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x5e, 0xe4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x81, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x68, 0xe9, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x80, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x44, 0x81, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x86, 0x21, 0xa9, 0x9c, 0x2a, 0x57, 0x19, 0x24, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x81, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7d, 0x3a, 0x77, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x87, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xf8, 0xfd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x86, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x48, 0x68, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x84, 0x21, 0xa9, 0x9c, 0x2a, 0x56, 0x4d, 0x96, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x87, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x44, 0x6f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x85, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x88, 0xf1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x84, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xaa, 0x61, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x8a, 0x21, 0xa9, 0x9c, 0x2a, 0x51, 0x6e, 0x2b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x85, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x00, 0xfc, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x8b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x21, 0x6c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x8a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x61, 0x7d, 0x31, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x88, 0x21, 0xa9, 0x9c, 0x2a, 0x50, 0x3a, 0x99, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x8b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x53, 0xa6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x89, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x51, 0x60, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x88, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x83, 0x7d, 0x38, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x8e, 0x21, 0xa9, 0x9c, 0x2a, 0x53, 0x54, 0xe2, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x89, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x17, 0x35, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x8f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc1, 0x74, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x8e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x8f, 0xf1, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x8c, 0x21, 0xa9, 0x9c, 0x2a, 0x52, 0x00, 0x50, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x8f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x49, 0x2d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x8d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb1, 0x78, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x8c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x6d, 0xf8, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x92, 0x21, 0xa9, 0x9c, 0x2a, 0x5d, 0xb8, 0x61, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x8d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x0d, 0xbe, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x93, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6b, 0xf7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x92, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x39, 0x9b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x90, 0x21, 0xa9, 0x9c, 0x2a, 0x5c, 0xec, 0xd3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x93, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x44, 0x60, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x91, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1b, 0xfb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x90, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xdb, 0x92, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x96, 0x21, 0xa9, 0x9c, 0x2a, 0x5f, 0x82, 0xa8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x91, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x00, 0xf3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x97, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8b, 0xef, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x96, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd7, 0x7b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x94, 0x21, 0xa9, 0x9c, 0x2a, 0x5e, 0xd6, 0x7d, 0x3a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x97, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x5e, 0xeb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x95, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfb, 0xe3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x94, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x35, 0x72, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x9a, 0x21, 0xa9, 0x9c, 0x2a, 0x59, 0xf5, 0xa7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x95, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7d, 0x3a, 0x78, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x9b, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x52, 0x7d, 0x5e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x9a, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xfe, 0x02, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x98, 0x21, 0xa9, 0x9c, 0x2a, 0x58, 0xa1, 0x15, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x9b, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x49, 0x22, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x99, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x22, 0x72, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x98, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x1c, 0x0b, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x9e, 0x21, 0xa9, 0x9c, 0x2a, 0x5b, 0xcf, 0x6e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x99, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x0d, 0xb1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x9f, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb2, 0x66, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x9e, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x10, 0xe2, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x9c, 0x21, 0xa9, 0x9c, 0x2a, 0x5a, 0x9b, 0xdc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x9f, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x53, 0xa9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x9d, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc2, 0x6a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x9c, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf2, 0xeb, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xa2, 0x21, 0xa9, 0x9c, 0x2a, 0x45, 0x04, 0xd4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x9d, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x17, 0x3a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xa3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfe, 0xc1, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xa2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x88, 0x8f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xa0, 0x21, 0xa9, 0x9c, 0x2a, 0x44, 0x50, 0x66, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xa3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x6b, 0xec, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xa1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8e, 0xcd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xa0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x6a, 0x86, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xa6, 0x21, 0xa9, 0x9c, 0x2a, 0x47, 0x3e, 0x1d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xa1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x2f, 0x7f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xa7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1e, 0xd9, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xa6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x66, 0x6f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xa4, 0x21, 0xa9, 0x9c, 0x2a, 0x46, 0x6a, 0xaf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xa7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x71, 0x67, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xa5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6e, 0xd5, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xa4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x84, 0x66, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xaa, 0x21, 0xa9, 0x9c, 0x2a, 0x41, 0x49, 0x12, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xa5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x35, 0xf4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xab, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc7, 0x48, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xaa, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4f, 0x16, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xa8, 0x21, 0xa9, 0x9c, 0x2a, 0x40, 0x1d, 0xa0, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xab, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x66, 0xae, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xa9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb7, 0x44, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xa8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xad, 0x1f, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xae, 0x21, 0xa9, 0x9c, 0x2a, 0x43, 0x73, 0xdb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xa9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x22, 0x3d, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xaf, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x27, 0x50, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xae, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa1, 0xf6, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xac, 0x21, 0xa9, 0x9c, 0x2a, 0x42, 0x27, 0x69, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xaf, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7c, 0x25, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xad, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x57, 0x5c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xac, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x43, 0xff, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xb2, 0x21, 0xa9, 0x9c, 0x2a, 0x4d, 0x9f, 0x58, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xad, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x38, 0xb6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xb3, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8d, 0xd3, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xb2, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x17, 0x9c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xb0, 0x21, 0xa9, 0x9c, 0x2a, 0x4c, 0xcb, 0xea, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xb3, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x71, 0x68, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xb1, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfd, 0xdf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xb0, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf5, 0x95, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xb6, 0x21, 0xa9, 0x9c, 0x2a, 0x4f, 0xa5, 0x91, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xb1, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x35, 0xfb, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xb7, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6d, 0xcb, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xb6, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xf9, 0x7c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xb4, 0x21, 0xa9, 0x9c, 0x2a, 0x4e, 0xf1, 0x23, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xb7, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x6b, 0xe3, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xb5, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1d, 0xc7, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xb4, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x1b, 0x75, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0xba, 0x21, 0xa9, 0x9c, 0x2a, 0x49, 0xd2, 0x9e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xb5, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x2f, 0x70, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0xbb, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xb4, 0x5a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0xba, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xd0, 0x05, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0xb8, 0x21, 0xa9, 0x9c, 0x2a, 0x48, 0x86, 0x2c, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0xbb, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x7c, 0x2a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0xb9, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xc4, 0x56, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0xb8, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70}));
	UT_WAIT_MS(120);
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x32, 0x0c, 0x7e}));
	UT_WAIT_MS(150);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0xbe, 0x21, 0xa9, 0x9c, 0x2a, 0x4b, 0xe8, 0x57, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0xb9, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x38, 0xb9, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0xbf, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x54, 0x42, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0xbe, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x3e, 0xe5, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0xbc, 0x21, 0xa9, 0x9c, 0x2a, 0x4a, 0xbc, 0xe5, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0xbf, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x66, 0xa1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0xbd, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x24, 0x4e, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0xbc, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xdc, 0xec, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x42, 0x21, 0xa9, 0x9c, 0x2a, 0x75, 0xb9, 0xbf, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0xbd, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0x22, 0x32, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x43, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x6c, 0x7f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x42, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x42, 0x9a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x40, 0x21, 0xa9, 0x9c, 0x2a, 0x74, 0xed, 0x0d, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x43, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xe0, 0xd4, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x41, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x1c, 0x73, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x40, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xa0, 0x93, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x46, 0x21, 0xa9, 0x9c, 0x2a, 0x77, 0x83, 0x76, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x41, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xa4, 0x47, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x47, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x8c, 0x67, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x46, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0xac, 0x7a, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	stageExpectedTransitions.push_back({0x61, 0x44, 0x21, 0xa9, 0x9c, 0x2a, 0x76, 0xd7, 0xc4, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x47, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xfa, 0x5f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x72, 0x45, 0x21, 0xa9, 0x9d, 0x2a, 0x05, 0xb2, 0x59, 0x94, 0x4a, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0xfc, 0x6b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x17, 0x44, 0xa1, 0xa9, 0x9c, 0x2a, 0x15, 0x4d, 0x59, 0x84, 0x4b, 0x25, 0xaa, 0x55, 0x92, 0x49, 0x9c, 0x4e, 0x27, 0xab, 0xed, 0xce, 0x67, 0x8b, 0xfd, 0xc6, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0x6f, 0x8f, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x69, 0x8c, 0x46, 0x23, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0xea, 0x75, 0x82, 0x41, 0x98, 0x4c, 0x26, 0x7d, 0x33, 0xb1, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0xbb, 0xe5, 0xca, 0x4e, 0x73, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	stageExpectedTransitions.push_back({0x03, 0x4a, 0x21, 0xa9, 0x9c, 0x2a, 0x71, 0xf4, 0x79, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x20, 0x45, 0xa1, 0xa9, 0x9d, 0x2a, 0x15, 0xbe, 0xcc, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	stageExpectedTransitions.push_back({0x14, 0x4b, 0x21, 0xa9, 0xb5, 0x2a, 0x15, 0x85, 0x59, 0xc5, 0x4b, 0x12, 0xaa, 0x04, 0x93, 0x49, 0x62, 0x37, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x31, 0x4a, 0xa1, 0xa9, 0x9c, 0x2a, 0xa4, 0xbf, 0x58, 0xe4, 0x4a, 0xd5, 0x91, 0xd7, 0x98, 0x49, 0x9c, 0x44, 0x27, 0xab, 0xed, 0x9b, 0xe4, 0x8b, 0xfd, 0xcc, 0x63, 0x89, 0xfc, 0x45, 0xbd, 0xa7, 0xcb, 0x6d, 0x5c, 0x6f, 0xaf, 0xff, 0xc7, 0xdb, 0xd5, 0xd2, 0x63, 0x8c, 0x46, 0x23, 0xba, 0x68, 0x56, 0x3b, 0xa5, 0xea, 0x75, 0x27, 0x42, 0x98, 0x4c, 0x2c, 0x7d, 0x33, 0xbb, 0xe0, 0xe3, 0xe2, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	stageExpectedTransitions.push_back({0x25, 0x48, 0x21, 0xa9, 0x89, 0x2a, 0x15, 0x34, 0x5b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x42, 0x4b, 0xa1, 0xa9, 0xb5, 0x2a, 0x15, 0xc2, 0xf1, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	stageExpectedTransitions.push_back({0x36, 0x49, 0x21, 0xa9, 0x8b, 0x2a, 0x15, 0xb3, 0xf1, 0x96, 0x4a, 0x12, 0xaa, 0x04, 0x93, 0x7d, 0x5e, 0x9c, 0x1f, 0x26, 0xab, 0xed, 0x31, 0x98, 0xbc, 0xfd, 0x39, 0x71, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0x0d, 0x41, 0x67, 0x74, 0xc5, 0x25, 0x55, 0x6d, 0x71, 0x7f, 0x78, 0xc3, 0x26, 0xec, 0x89, 0x03, 0x36, 0x40, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x53, 0x48, 0xa1, 0xa9, 0x89, 0x2a, 0x15, 0xb3, 0x59, 0x94, 0x4a, 0xe8, 0x01, 0x05, 0x92, 0x84, 0x37, 0x1e, 0x27, 0xab, 0xed, 0x31, 0x67, 0x8b, 0x02, 0x39, 0x9c, 0x76, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0x14, 0xcd, 0xde, 0x90, 0x70, 0x00, 0x38, 0xdb, 0xd5, 0xd2, 0x69, 0x73, 0xb9, 0xdc, 0xa9, 0xec, 0x76, 0x3b, 0xa5, 0x15, 0x8a, 0x7d, 0x5d, 0xbe, 0x67, 0xb3, 0xd9, 0xec, 0x4e, 0x1f, 0x8f, 0xc7, 0xe3, 0xf1, 0xf8, 0x44, 0x8a, 0x1f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	stageExpectedTransitions.push_back({0x47, 0x4e, 0x21, 0xa9, 0x9d, 0x2a, 0xbd, 0x57, 0x5b, 0x94, 0x4a, 0x12, 0xaa, 0x04, 0x93, 0x7d, 0x5e, 0x9c, 0x1f, 0x26, 0xab, 0xec, 0xce, 0x67, 0xbc, 0xfd, 0xf1, 0x63, 0x89, 0xfc, 0x7d, 0x5e, 0x3f, 0xa7, 0xeb, 0xcd, 0xde, 0xc5, 0x25, 0x55, 0x6d, 0x71, 0x7f, 0x78, 0xc3, 0x26, 0xec, 0x89, 0x03, 0x46, 0xdc, 0x91, 0x0f, 0xea, 0x75, 0x82, 0x41, 0x67, 0x37, 0xfc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x64, 0x49, 0xa1, 0xa9, 0x8b, 0x2a, 0x15, 0x58, 0xc6, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	stageExpectedTransitions.push_back({0x50, 0x4f, 0x21, 0xa9, 0x4e, 0x2a, 0x15, 0xb2, 0xa1, 0x6b, 0x4d, 0x26, 0x23, 0xf8, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x75, 0x4e, 0xa1, 0xa9, 0x9d, 0x2a, 0x14, 0xfe, 0x7f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x4f, 0xa1, 0xa9, 0x4e, 0x2a, 0x15, 0xcb, 0xd9, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x16, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x1e, 0x1b, 0x71, 0xe4, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x26, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x19, 0x7d, 0x3a, 0xbe, 0x8e, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x36, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x7d, 0x38, 0x7d, 0x3a, 0xb0, 0x0b, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x46, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x1b, 0x7d, 0x3a, 0x55, 0x54, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x7d, 0x3a, 0x7d, 0x3a, 0x5b, 0xd1, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x05, 0x7d, 0x3a, 0x0e, 0x40, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x76, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x04, 0x19, 0x30, 0xa6, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x81, 0x60, 0x59, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x07, 0x19, 0xd5, 0xf9, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x16, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x06, 0x15, 0x7d, 0x3a, 0xf0, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x83, 0x40, 0x1b, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x26, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x01, 0x15, 0xc5, 0xbb, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x84, 0x30, 0xfc, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x36, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x00, 0x1b, 0x2a, 0xf0, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x85, 0x20, 0xdd, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x46, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x03, 0x0e, 0x8d, 0x3b, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x86, 0x10, 0xbe, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x56, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x02, 0x0e, 0x83, 0xbe, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x87, 0x00, 0x9f, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x66, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x0d, 0x1b, 0x97, 0xc8, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x80, 0x70, 0x78, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x76, 0x4f, 0xb1, 0xa9, 0x1c, 0x2a, 0x0c, 0x14, 0x68, 0xa2, 0x7e}));
	UT_WAIT_MS(500);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	stageExpectedTransitions.push_back({0x82, 0x50, 0x3a, 0x7e});
	mockUartDriverHandle->scheduleIncomingChunk(MockUartScheduledByteDelivery({0x06, 0x4f, 0xb5, 0xa9, 0x1c, 0x2a, 0x0f, 0x14, 0x8b, 0x5c, 0x7e, 0x16, 0x4f, 0xb1, 0xa9, 0x48, 0x2a, 0x1c, 0xb2, 0x8c, 0x8f, 0x7e}));
	UT_WAIT_MS(120);
	UT_FAILF_UNLESS_STAGE(stageExpectedTransitions.size());

	std::this_thread::sleep_for(std::chrono::milliseconds(1000));	/* Give 1s for final timeout (allows all written bytes to be sent by libezsp) */

	mockUartDriverHandle->destroyAllScheduledIncomingChunks(); /* Destroy all uartDriver currently running thread just in case */

	NOTIFYPASS();
}


#ifndef USE_CPPUTEST
void unit_tests_gp() {
	gp_recv_sensor_measurement();
}
#endif	// USE_CPPUTEST
